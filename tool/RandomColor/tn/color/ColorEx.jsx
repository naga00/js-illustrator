//@include "CMYKColorEx.jsx";//@include "RGBColorEx.jsx";//@include "GrayColorEx.jsx";//@include "NoColorEx.jsx";function ColorEx() {}/** * RGB配列 を HSV配列 へ変換します * * @param   {Number}  r         red値   ※ 0～255 の数値 * @param   {Number}  g         green値 ※ 0～255 の数値 * @param   {Number}  b         blue値  ※ 0～255 の数値 * @param   {Boolean} coneModel 円錐モデルにするか * @return  {Object}  {h, s, b} ※ h は 0～360の数値、s/v は 0～100 の数値 */ColorEx.RGBtoHSB = function(red, green, blue, coneModel) {  var h, s, b;  var max = Math.max(Math.max(red, green), blue);  var min = Math.min(Math.min(red, green), blue);  var colorObj = new Object();  // hue の計算  if (max == min) {    h = 0; // 本来は定義されないが、仮に0を代入  } else if (max == red) {    h = 60 * (green - blue) / (max - min) + 0;  } else if (max == green) {    h = (60 * (blue - red) / (max - min)) + 120;  } else {    h = (60 * (red - green) / (max - min)) + 240;  }  while (h < 0) {    h += 360;  }  // saturation の計算  if (coneModel) {    // 円錐モデルの場合    s = max - min;  } else {    s = (max == 0) ? 0 : (max - min) / max * 100;  }  b = max * 100 / 255;  colorObj.h = h;  colorObj.s = s;  colorObj.b = b;  return colorObj;}/** * HSV配列 を RGB配列 へ変換します * * @param   {Number}  h         hue値        ※ 0～360の数値 * @param   {Number}  s         saturation値 ※ 0～100 の数値 * @param   {Number}  b         value値      ※ 0～100 の数値 */ColorEx.HSBtoRGB = function(h, s, b) {	  var red, green, blue;  var color = new RGBColor();  while (h < 0) {    h += 360;  }  h = h % 360;  s = s / 100;  b = b * 255 / 100;  var i = Math.floor(h / 60) % 6;  var f = (h / 60) - i;  var p = b * (1 - s);  var q = b * (1 - f * s);  var t = b * (1 - (1 - f) * s);  switch (i) {    case 0 :      red = b;  green = t;  blue = p;  break;    case 1 :      red = q;  green = b;  blue = p;  break;    case 2 :      red = p;  green = b;  blue = t;  break;    case 3 :      red = p;  green = q;  blue = b;  break;    case 4 :      red = t;  green = p;  blue = b;  break;    case 5 :      red = b;  green = p;  blue = q;  break;  }  color.red = Math.round(red);  color.green = Math.round(green);  color.blue = Math.round(blue);  return color;}// RGB→YCbCr変換ColorEx.RGBtoYCbCr = function(r, g, b) {	var colorObj = new Object(); // 独自のカラーオブジェクト	colorObj.Y = 0.29891*r + 0.58661*g + 0.11448*b;	colorObj.Cb = -0.16874*r - 0.33126*g + 0.50000*b;	colorObj.Cr = 0.50000*r - 0.41869*g - 0.08131*b;	return colorObj; // YCbCrがオブジェクトの各プロパティとして割り当てられる};// YCbCr→RGB変換 (マイナス値は0に修正する)ColorEx.YCbCrtoRGB = function(Y, Cb, Cr) {	var colorObj = new Object(); // 独自のカラーオブジェクト	colorObj.r = Y + 1.40200 * Cr	colorObj.g = Y - 0.34414 * Cb - 0.71414 * Cr	colorObj.b = Y + 1.77200 * Cb	if (colorObj.r <0) colorObj.r = 0;	if (colorObj.g <0) colorObj.g = 0;	if (colorObj.rb<0) colorObj.b= 0;	return colorObj; // RGBがオブジェクトの各プロパティとして割り当てられる};ColorEx.setRGBColor = function(r,g,b) {    var color = new RGBColor();    color.red = r;    color.green = g;    color.blue = b;    return color;};ColorEx.setCMYKColor = function(c, m, y, k) {    var color = new CMYKColor();    color.cyan = c;    color.magenta = m;    color.yellow = y;    color.black = k;    return color;};ColorEx.setGRAYColor = function(gray) {  var color = new GrayColor();  color.gray = gray;  return color;};ColorEx.randomRGBColor = function(r,g,b) {	var color = new RGBColor();	color.red = Math.floor(Math.random() * r);	color.green = Math.floor(Math.random() * g);	color.blue = Math.floor(Math.random() * b);	return color;}ColorEx.randomCMYKColor = function(c, m, y, k) {	var color = new CMYKColor();	color.cyan = Math.random() * c;	color.magenta = Math.random() * m;	color.yellow = Math.random() * y;	color.black = Math.random() * k;	return color;  }ColorEx.randomGRAYColor = function(gray) {	var color = new GrayColor();	color.gray = Math.random() * gray;	return color;}ColorEx.randomHSBColor = function(h, s, b) {  return this.HSBtoRGB(Math.random()*h, Math.random()*s, Math.random()*b);}